---
to: <%- h.changeCase.pascalCase(config.name) %>/ViewController.swift
---
//
//  ViewController.swift
//  <%- h.changeCase.pascalCase(config.name) %>
//
//  Created by Daniel Leping on 06/09/2018.
//  Copyright Â© 2018 Daniel Leping. All rights reserved.
//

import UIKit
import WebKit
import Tesseract


class ViewController: UIViewController, WKUIDelegate, WKNavigationDelegate {
    private let config = Config.default
    
    private var openedUrl: URLInfo!
    private var subscriptions: [WebSinkUnsubscriber] = []
    
    private let openWalletNode: OpenWalletNode = OpenWalletNode(
        rpcUrls: Config.default.rpcUrls, openWallet: Tesseract.OpenWallet
    )
    
    var loadingView: LoadingView?
    
    var webView: WKWebView?
    
    var isSetStatusBarBackground = false
    
    func webView(_ webView: WKWebView,
                 didFailProvisionalNavigation navigation: WKNavigation!,
                 withError error: Error) {
        let alert = UIAlertController(title: "Error", message: "\(error.localizedDescription)\nURL: \(openedUrl.url)", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: { action in
            fatalError(error.localizedDescription)
        }))
        present(alert, animated: true, completion: nil)
    }
    
    func webView(_ webView: WKWebView,
                 didFail navigation: WKNavigation!,
                 withError error: Error) {
        print("Navigation error:", error)
    }
    
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        guard let loadingView = self.loadingView else { return }
        
        self.webView?.removeObserver(self, forKeyPath: #keyPath(WKWebView.estimatedProgress), context: nil)
        self.loadingView = nil
        
        UIView.animate(
            withDuration: 0.5,
            animations: { loadingView.alpha = 0 }
        ) { _ in
            loadingView.removeFromSuperview()
            
            if !self.isSetStatusBarBackground { self.setStatusBarBackground() }
        }
    }
    
    func webView(_ webView: WKWebView, runJavaScriptAlertPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping () -> Void) {
        print("**JS**:", message)
        completionHandler()
    }
    
    private func openUrl(url: URLInfo) {
        title = url.name
        
        for view in self.view.subviews {
            view.removeFromSuperview()
        }
        
        for subscr in subscriptions {
            subscr()
        }
        subscriptions = []
        
        let webView = WebView(frame: self.view.frame)
        self.webView = webView
        
        let unknownSubscr = webView.on(UnknownMessage.self) { _, m in
            print("Unknown message: ", m.name, " with payload: ", m.body)
        }
        let openSubscr = webView.on(OpenURLMessage.self) { _, m in
            UIApplication.shared.open(m.url, options: [:], completionHandler: nil)
        }
        
        subscriptions.append(unknownSubscr)
        subscriptions.append(openSubscr)
       
        openWalletNode.link(with: webView)
        
        self.view.addSubview(webView)
        
        webView.translatesAutoresizingMaskIntoConstraints = false
        let attributes: [NSLayoutConstraint.Attribute] = [.top, .bottom, .right, .left]
        NSLayoutConstraint.activate(attributes.map {
            NSLayoutConstraint(item: webView, attribute: $0, relatedBy: .equal, toItem: webView.superview, attribute: $0, multiplier: 1, constant: 0)
        })
        
        webView.addObserver(self, forKeyPath: #keyPath(WKWebView.estimatedProgress), options: .new, context: nil)
        
        webView.uiDelegate = self
        webView.navigationDelegate = self
        webView.load(URLRequest(url: url.url))
        
        let loadingView = LoadingView.create()
        config.progressView != nil
            ? loadingView.setProps(props: LoadingViewProps(jsonProps: config.progressView!))
            : loadingView.removeProgressView()
        loadingView.translatesAutoresizingMaskIntoConstraints = false
        
        self.view.addSubview(loadingView)
        
        NSLayoutConstraint.activate(attributes.map {
            NSLayoutConstraint(item: loadingView, attribute: $0, relatedBy: .equal, toItem: loadingView.superview!, attribute: $0, multiplier: 1, constant: 0)
        })
        self.loadingView = loadingView
        
        self.openedUrl = url
    }
    
    override func motionEnded(_ motion: UIEvent.EventSubtype, with event: UIEvent?)
    {
        if (event?.subtype == .some(.motionShake) && config.activeURLs.count > 1) {
            let alert = UIAlertController(title: "Select URL", message: "Choose application URL", preferredStyle: .actionSheet)
            for url in config.activeURLs {
                let action = UIAlertAction(title: url.name, style: .default) { _ in
                    self.openUrl(url: url)
                }
                alert.addAction(action)
            }
            alert.addAction(UIAlertAction(title: "Cancel", style: .cancel))
            self.present(alert, animated: true, completion: nil)
        }
    }
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "estimatedProgress" {
            loadingView?.progressView?.setProgress(webView?.estimatedProgress ?? 0)
        }
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        openUrl(url: config.activeURLs[0])
    }

    private func setStatusBarBackground() {
        let statusBarView = UIView(frame: UIApplication.shared.statusBarFrame)
        statusBarView.backgroundColor = UIColor(hex: config.statusBarColor)
        statusBarView.autoresizingMask = [.flexibleWidth, .flexibleTopMargin]
        view.addSubview(statusBarView)
        
        isSetStatusBarBackground = true
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return config.isLightStatusBar ? .lightContent : .default
    }
    
    deinit {
        if loadingView != nil {
            webView?.removeObserver(self, forKeyPath: #keyPath(WKWebView.estimatedProgress), context: nil)
        }
        for subscr in subscriptions {
            subscr()
        }
    }
}